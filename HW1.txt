//1
/**
 * @return {Function}
 */
var createHelloWorld = function() {
    return function(...args) {
        return "Hello World";
    }
};
//2
/**
 * @param {number} n
 * @return {Function} counter
 */
var createCounter = function(n) {
    return function() {
        return n++;
    };
};
//3
/**
 * @param {string} val
 * @return {Object}
 */
var expect = function(val) {
    return {
        toBe(b){
            if (val === b)
                return true;
            else throw new Error("Not Equal");
        },
        notToBe(b){
            if (val !== b)
               return true;
            else throw new Error("Equal");
        }
    };
};
//4
/**
 * @param {integer} init
 * @return { increment: Function, decrement: Function, reset: Function }
 */
var createCounter = function(init) {
    a = init;
    return {
        increment(){
            return ++init;
        },
        decrement(){
             return --init;
        },
        reset(){
            init = a;
             return init;
        }
    };
};
//5
/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    const returnedArray = [];
    for (let i = 0; i < arr.length; i++) {
        returnedArray[i] = (fn(arr[i], i));
    }
    return returnedArray;
};
//6
/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var filter = function(arr, fn) {
    const filteredArr = [];
    j = 0;
    for (let i = 0; i < arr.length; i++) {
        if((fn(arr[i], i))){
            filteredArr[j] = arr[i];
            j++;
        }
    }
    return filteredArr;
};
//7
/**
 * @param {number[]} nums
 * @param {Function} fn
 * @param {number} init
 * @return {number}
 */
var reduce = function(nums, fn, init) {
    if(nums.length !== 0){
        a = fn(init, nums[0]);
        for (let i = 1; i < nums.length; i++) {
            a = fn(a, nums[i]);
        }
        return a;
    }
    else return init;
};
//8
/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
	return function(x) {
        if(functions.length !== 0){
            a = x;
            for (i = functions.length - 1; i >= 0; i--) {
                a = functions[i](a);
            }
            return a;
        }
        else return x;
    }
};
//9
/**
 * @return {number}
 */
var argumentsLength = function(...args) {
    return args.length;
};
//10
/**
 * @param {Function} fn
 * @return {Function}
 */
var once = function(fn) {
    a = true;
    return function(...args){
        if(a){
            a = false;
            b = fn(...args);
            return b;
        }
        else return undefined;
    }
};
//11
/**
 * @param {Promise} promise1
 * @param {Promise} promise2
 * @return {Promise}
 */
var addTwoPromises = async function(promise1, promise2) {
    return new Promise((resolve, reject) => {
        let sum;
        promise1.then(result1 => {
            sum = result1;
            if (typeof sum !== 'undefined' && typeof result2 !== 'undefined') {
                resolve(sum + result2);
            }
        }).catch(reject);
        let result2;
        promise2.then(result => {
            result2 = result;
            if (typeof sum !== 'undefined' && typeof result2 !== 'undefined') {
                resolve(sum + result2);
            }
        }).catch(reject);
    })
};
//12
/**
 * @param {number} millis
 */
async function sleep(millis) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve("Sleep completed");
        }, millis);
    });
}
//13
/**
 * @param {Function} fn
 * @param {Array} args
 * @param {number} t
 * @return {Function}
 */
var cancellable = function(fn, args, t) {
    a = true;
    const t2 = setTimeout(() => {
        if (a) {
            fn(...args);
        }
    }, t);

    const cancelFn = () => {
        a = false;
        clearTimeout(t2);
    };

    return cancelFn;
};
//14
/**
 * @param {Function} fn
 * @param {Array} args
 * @param {number} t
 * @return {Function}
 */
var cancellable = function(fn, args, t) {
    const interval = setInterval(() => {
        fn(...args);
    }, t);
    const cancelFn = () => {
        clearInterval(interval);
    };
    fn(...args);
    return cancelFn;
};
//15
/**
 * @param {Object | Array} obj
 * @return {boolean}
 */
var isEmpty = function(obj) {
    obj = JSON.stringify(obj);
    return obj.length == 2;
};
//16
/**
 * @param {Array} arr
 * @param {number} size
 * @return {Array[]}
 */
var chunk = function(arr, size) {
    const arr2 = [];
    for(i=0; i<arr.length; i+=size) {
        arr2.push(arr.slice(i, i + size));
    }
    return arr2;
};
//17
Array.prototype.last = function() {
    return this.length > 0 ? this[this.length - 1] : -1;
};
//18
/**
 * @param {Array} arr
 * @param {Function} fn
 * @return {Array}
 */
var sortBy = function(arr, fn) {
    return arr.sort((a, b) => fn(a) - fn(b));
};
//19
/**
 * @param {number[]} nums
 */
var ArrayWrapper = function(nums) {
    this.arr = nums;
};

ArrayWrapper.prototype.valueOf = function() {
    return this.arr.reduce((sum, num) => sum + num, 0);
}

ArrayWrapper.prototype.toString = function() {
    return '[' + this.arr.join(',') + ']';
}
//20
class Calculator {
  
  /** 
   * @param {number} value
   */
  constructor(value) {
      this.result = value;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  add(value){
      this.result += value;
      return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  subtract(value){
      this.result -= value;
      return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */  
  multiply(value) {
      this.result *= value;
      return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  divide(value) {
      if (value === 0)
          throw new Error("Division by zero is not allowed");
    this.result /= value;
    return this;
  }
  
  /** 
   * @param {number} value
   * @return {Calculator}
   */
  power(value) {
      this.result = Math.pow(this.result, value);
      return this;
  }
    
  /** 
   * @return {number}
   */
  getResult() {
      return this.result;
  }
}